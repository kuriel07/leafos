/*!\file 		vm_framework.h
 * \brief     	Orb-Weaver Framework APIs
 * \details   	Orb-Weaver Framework APIs provide all necessary function for Native API integration to stack machine
 * \author    	AGP
 * \version   	1.4
 * \date      	Created by Agus Purwanto on 06/18/2017.
 * \pre       	
 * \bug       	
 * \warning   	
 * \copyright 	OrbLeaf Technology
\verbatim
1.0
 * initial release, all APIs declared on this header	(2016.06.18)
 * added : va_trap_apis for persistent storage trap allocator, ported from icos_orb	(2016.06.21)
 * added : persistent storage variable APIs (2017.06.21)
 * added : SMTP APIs for sendmail (RFC822) based on http://www.codeproject.com/KB/mcpp/CSmtp.aspx (2017.06.21)
 * changed : added interrupt mechanism for pin event (2017.09.11)
 * added: va_ui_create_image to support image rendering from resource (2017.12.09)
 * added: va_sys_exec_31 to support execution of vm_function object generated by F2O (2018.01.10)
 * fixed : va_arg_serialize_s and va_arg_deserialize_s, remove quote for numeric and key (2018.03.24)
 * added : va_string_split, similar with explode from PHP (2018.04.29)
 * changed : va_arg_serialize_s, va_arg_deserialize_s, va_arg_object, va_arg_array to BER-TLV structure (2018.04.29)
 * modified : swap set_var-get_var api_id, add this() syscall_0 API (2018.05.06)
 * modified : va_ui_create_window now support init_data (gui designer) which contain childs information (2018.05.22)
 * added: va_persistent() or data() APi for processing persistent data (2018.05.22) 
1.1
* changed : added support for vm_instance (2018.09.29)
\endverbatim
 */

#include "..\..\defs.h"
#include "..\..\config.h"
#include "VMStackApis.h"

#ifndef VM_FRAMEWORK__H

#define VA_OBJECT_DELIMITER			0x80

#define VA_STATE_WAIT						0x08
#define VA_STATE_RUN						0x01
#define VA_STATE_IDLE						0x00

typedef struct va_default_context{
	void * ctx;
	uint32 offset;
	void (* close)(VM_DEF_ARG);
	void (* read)(VM_DEF_ARG);
	void (* write)(VM_DEF_ARG);
	void (* seek)(VM_DEF_ARG);
} va_default_context;

#define VA_PINTYPE_IO						0x03
#define VA_PINTYPE_PWM					0x04
typedef struct va_port_context {
	va_default_context base;
	uint8 state;
	uint8 id;
	uint16 pin;
	void * handle;			//to be released
	uint8 dutycycle;
	uint16 freq;
} va_port_context;

typedef struct va_net_context {
	va_default_context base;
	uint8 type[3];
	void * instance;
} va_net_context;

typedef struct va_com_context {
	va_default_context base;
	USART_HandleTypeDef handle;
} va_com_context;

typedef struct va_ble_context {
	va_default_context base;
	bt_handle handle;
} va_ble_context;

typedef struct va_picc_key {
	void * ctx;
	uint8 block;
	uint8 keyid;
	uint8 key[6];
	struct va_picc_key * next;
} va_picc_key;

typedef struct va_picc_context {
	va_default_context base;
	uint8 state;					//open/close state
	va_picc_key * keys;
} va_picc_context;

typedef struct va_port_config {
	uint16 id;
	void * port;
	uint32 pin;
} va_port_config;

//global
void va_this(VM_DEF_ARG) _REENTRANT_;
void va_persistent(VM_DEF_ARG) _REENTRANT_;
void va_sys_exec(VM_DEF_ARG) _REENTRANT_ ;			//execute a function object
void va_set_execution_context(VM_DEF_ARG) _REENTRANT_ ;
//default context read/write operation
void va_read(VM_DEF_ARG) _REENTRANT_ ;
void va_write(VM_DEF_ARG) _REENTRANT_ ;
void va_close(VM_DEF_ARG) _REENTRANT_ ;
void va_seek(VM_DEF_ARG) _REENTRANT_;
//var
void va_set_var(VM_DEF_ARG) _REENTRANT_ ;
void va_get_var(VM_DEF_ARG) _REENTRANT_ ;
void va_delete_var(VM_DEF_ARG) _REENTRANT_ ; 
//string
void va_index_of(VM_DEF_ARG) _REENTRANT_ ;
void va_last_index_of(VM_DEF_ARG) _REENTRANT_ ;
void va_replace(VM_DEF_ARG) _REENTRANT_ ;
void va_substr(VM_DEF_ARG) _REENTRANT_ ;
void va_string_split(VM_DEF_ARG) _REENTRANT_ ;
//bytes creation
void va_bytes(VM_DEF_ARG) _REENTRANT_ ;
//file
void va_fopen(VM_DEF_ARG) _REENTRANT_ ;  
void va_fread(VM_DEF_ARG) _REENTRANT_ ;
void va_fwrite(VM_DEF_ARG) _REENTRANT_ ;
void va_fclose(VM_DEF_ARG) _REENTRANT_ ;
void va_fpopbytag(VM_DEF_ARG) _REENTRANT_ ;  
//json				
void va_arg_findtag(VM_DEF_ARG) _REENTRANT_ ;	
void va_arg_count(VM_DEF_ARG) _REENTRANT_;			
void va_arg_create(VM_DEF_ARG) _REENTRANT_ ;
void va_arg_object(VM_DEF_ARG) _REENTRANT_ ;
void va_arg_array(VM_DEF_ARG) _REENTRANT_ ; 	 
void va_arg_at(VM_DEF_ARG) _REENTRANT_ ;
void va_arg_get(VM_DEF_ARG) _REENTRANT_ ;
void va_arg_serialize(VM_DEF_ARG) _REENTRANT_ ;			// -> to json string
void va_arg_deserialize(VM_DEF_ARG) _REENTRANT_ ;			// -> from json string
void va_arg_add(VM_DEF_ARG) _REENTRANT_ ;
void va_arg_set(VM_DEF_ARG) _REENTRANT_ ;		
void va_arg_remove(VM_DEF_ARG) _REENTRANT_ ;

//toolkit (21-36)
void va_select_item(VM_DEF_ARG) _REENTRANT_;
void va_display_text(VM_DEF_ARG) _REENTRANT_;
void va_get_input(VM_DEF_ARG) _REENTRANT_;
void va_set_timer(VM_DEF_ARG) _REENTRANT_ ; 
//invoke external
void va_invoke_external(VM_DEF_ARG) _REENTRANT_ ;

//picc APIs
void va_picc_init(VM_DEF_ARG);				//init global PICC context
void va_picc_release_all(VM_DEF_ARG);		//release global PICC context
void va_picc_open(VM_DEF_ARG) _REENTRANT_ ;
void va_picc_auth(VM_DEF_ARG) _REENTRANT_;
void va_picc_transmit(VM_DEF_ARG);

//iso8583 (37-39)
void va_iso_create_message(VM_DEF_ARG) _REENTRANT_ ; 
void va_iso_push_element(VM_DEF_ARG) _REENTRANT_ ;
void va_iso_get_element(VM_DEF_ARG) _REENTRANT_ ;

//generic toolkit
void va_toolkit_create(VM_DEF_ARG) _REENTRANT_ ;  
void va_toolkit_push_ext(VM_DEF_ARG) _REENTRANT_ ;
void va_toolkit_push_raw(VM_DEF_ARG) _REENTRANT_ ;
void va_toolkit_dispatch(VM_DEF_ARG) _REENTRANT_ ;
void va_toolkit_get_result(VM_DEF_ARG) _REENTRANT_ ;
//bit operation 
void va_check_bit(VM_DEF_ARG) _REENTRANT_ ; 
void va_set_bit(VM_DEF_ARG) _REENTRANT_ ;
void va_clear_bit(VM_DEF_ARG) _REENTRANT_ ;
//converter
void va_bin2hex(VM_DEF_ARG) _REENTRANT_;
void va_hex2bin(VM_DEF_ARG) _REENTRANT_; 
void va_bin2dec(VM_DEF_ARG) _REENTRANT_;
void va_dec2bin(VM_DEF_ARG) _REENTRANT_;
void va_b64_encode(VM_DEF_ARG) _REENTRANT_ ;
void va_b64_decode(VM_DEF_ARG) _REENTRANT_ ;
void va_str2uri(VM_DEF_ARG) _REENTRANT_;			//escape string
void va_uri2str(VM_DEF_ARG) _REENTRANT_;			//unescape string
//codec
void va_crypto_create(VM_DEF_ARG) _REENTRANT_ ;
void va_crypto_encrypt(VM_DEF_ARG) _REENTRANT_ ; 
void va_crypto_decrypt(VM_DEF_ARG) _REENTRANT_ ;
void va_random(VM_DEF_ARG) _REENTRANT_ ;
void va_digest(VM_DEF_ARG) _REENTRANT_ ;
//security
void va_verify_pin(VM_DEF_ARG) _REENTRANT_ ;
//toolkit manager			  
void va_terminal_profile(VM_DEF_ARG) _REENTRANT_ ; 
//cross APIs
void va_wib_set_return_var(VM_DEF_ARG) _REENTRANT_ ; 
void va_get_info(VM_DEF_ARG) _REENTRANT_ ;
//default syscall return
vm_object * va_syscall_ret(BYTE size, BYTE * buffer) _REENTRANT_ ;

void va_delay(VM_DEF_ARG);
void va_set_interval(VM_DEF_ARG);

//ui apis
void va_ui_init(VM_DEF_ARG);
void va_ui_release_all(VM_DEF_ARG);
void va_ui_alert(VM_DEF_ARG);
void va_ui_create_window(VM_DEF_ARG);
void va_ui_destroy_window(VM_DEF_ARG);
void va_ui_create_label(VM_DEF_ARG);
void va_ui_create_button(VM_DEF_ARG);
void va_ui_create_listitem(VM_DEF_ARG);
void va_ui_create_textbox(VM_DEF_ARG);
void va_ui_create_image(VM_DEF_ARG);
void va_ui_find_by_name(VM_DEF_ARG);
void va_ui_get_text(VM_DEF_ARG);
void va_ui_set_text(VM_DEF_ARG);
void va_ui_set_image(VM_DEF_ARG);
void va_ui_wait(VM_DEF_ARG);
void va_ui_present(VM_DEF_ARG, tk_context_p wctx, int32 ms) ;
void va_ui_push_window(VM_DEF_ARG);			//non blocking
void va_ui_pop_window(VM_DEF_ARG);				//non blocking
ui_object * va_ui_current_screen(VM_DEF_ARG);

//IO com APIs
void va_com_init() ;		//system startup
void va_com_open(VM_DEF_ARG);
void va_com_transmit(VM_DEF_ARG);
void va_com_readline(VM_DEF_ARG);
//IO port APIs
void va_port_open(VM_DEF_ARG);
void va_ble_open(VM_DEF_ARG);

//network APIs
void va_net_init();
void va_net_open(VM_DEF_ARG);
void va_net_transmit(VM_DEF_ARG);
void va_net_list(VM_DEF_ARG);
void va_net_mail_create(VM_DEF_ARG);
void va_net_mail_send(VM_DEF_ARG);
//system interface management APIs
void va_sim_query(VM_DEF_ARG);

//extension
void va_to_float(VM_DEF_ARG);

//default util
int32 va_o2f(vm_object * obj) _REENTRANT_ ;
void va_return_word(VM_DEF_ARG, WORD val) _REENTRANT_ ;
void * va_arg_enumerate(vm_object * obj);
uint8 * va_arg_next(void * enumerator, uint8 * key, uint16 * length, uint8 * value);
void va_arg_end(void * enumerator);

#define VM_FRAMEWORK__H
#endif